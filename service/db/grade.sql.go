// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: grade.sql

package db

import (
	"context"

	"github.com/is1ab/Arvosana/types"
)

const getGradeInfo = `-- name: GetGradeInfo :many
SELECT
    student.student_id,
    max(grade.grade) AS grade
FROM homework
CROSS JOIN student
LEFT JOIN grade ON
    homework.id = grade.homework_id AND
    student.id = grade.student_id
WHERE
    homework.semester = ? AND
    homework.name = ?
GROUP BY student.id
ORDER BY student.student_id ASC
`

type GetGradeInfoParams struct {
	Semester types.Semester `json:"semester"`
	Name     string         `json:"name"`
}

type GetGradeInfoRow struct {
	StudentID string      `json:"student_id"`
	Grade     interface{} `json:"grade"`
}

func (q *Queries) GetGradeInfo(ctx context.Context, arg GetGradeInfoParams) ([]GetGradeInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, getGradeInfo, arg.Semester, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGradeInfoRow{}
	for rows.Next() {
		var i GetGradeInfoRow
		if err := rows.Scan(&i.StudentID, &i.Grade); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentSubmitHistory = `-- name: GetStudentSubmitHistory :many
SELECT
    grade.grade,
    grade.submitted_at
FROM grade
INNER JOIN student ON grade.student_id = student.id
INNER JOIN homework ON grade.homework_id = homework.id
WHERE
    homework.semester = ? AND
    homework.name = ? AND
    student.student_id = ?
ORDER BY grade.submitted_at DESC
`

type GetStudentSubmitHistoryParams struct {
	Semester  types.Semester `json:"semester"`
	Name      string         `json:"name"`
	StudentID string         `json:"student_id"`
}

type GetStudentSubmitHistoryRow struct {
	Grade       float64        `json:"grade"`
	SubmittedAt types.Datetime `json:"submitted_at"`
}

func (q *Queries) GetStudentSubmitHistory(ctx context.Context, arg GetStudentSubmitHistoryParams) ([]GetStudentSubmitHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentSubmitHistory, arg.Semester, arg.Name, arg.StudentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStudentSubmitHistoryRow{}
	for rows.Next() {
		var i GetStudentSubmitHistoryRow
		if err := rows.Scan(&i.Grade, &i.SubmittedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubmitInfo = `-- name: GetSubmitInfo :one
SELECT
    student.id AS student_id,
    homework.id AS homework_id,
    homework.begin_at,
    homework.end_at
FROM student
INNER JOIN homework ON student.semester = homework.semester
WHERE
    student.student_id = ? AND
    student.semester = ? AND
    homework.name = ?
`

type GetSubmitInfoParams struct {
	StudentID string         `json:"student_id"`
	Semester  types.Semester `json:"semester"`
	Name      string         `json:"name"`
}

type GetSubmitInfoRow struct {
	StudentID  int64          `json:"student_id"`
	HomeworkID int64          `json:"homework_id"`
	BeginAt    types.Datetime `json:"begin_at"`
	EndAt      types.Datetime `json:"end_at"`
}

func (q *Queries) GetSubmitInfo(ctx context.Context, arg GetSubmitInfoParams) (GetSubmitInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getSubmitInfo, arg.StudentID, arg.Semester, arg.Name)
	var i GetSubmitInfoRow
	err := row.Scan(
		&i.StudentID,
		&i.HomeworkID,
		&i.BeginAt,
		&i.EndAt,
	)
	return i, err
}

const submitGrade = `-- name: SubmitGrade :exec
INSERT INTO grade (student_id, homework_id, submitted_at, grade)
VALUES (?, ?, ?, ?)
`

type SubmitGradeParams struct {
	StudentID   int64          `json:"student_id"`
	HomeworkID  int64          `json:"homework_id"`
	SubmittedAt types.Datetime `json:"submitted_at"`
	Grade       float64        `json:"grade"`
}

func (q *Queries) SubmitGrade(ctx context.Context, arg SubmitGradeParams) error {
	_, err := q.db.ExecContext(ctx, submitGrade,
		arg.StudentID,
		arg.HomeworkID,
		arg.SubmittedAt,
		arg.Grade,
	)
	return err
}
