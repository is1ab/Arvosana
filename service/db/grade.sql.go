// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: grade.sql

package db

import (
	"context"

	"github.com/is1ab/Arvosana/types"
)

const getSubmitInfo = `-- name: GetSubmitInfo :one
SELECT student.id AS student_id, homework.id AS homework_id FROM student
INNER JOIN homework ON student.semester = homework.semester
WHERE student.student_id = ? AND student.semester = ? AND homework.name = ?
`

type GetSubmitInfoParams struct {
	StudentID string         `json:"student_id"`
	Semester  types.Semester `json:"semester"`
	Name      string         `json:"name"`
}

type GetSubmitInfoRow struct {
	StudentID  int64 `json:"student_id"`
	HomeworkID int64 `json:"homework_id"`
}

func (q *Queries) GetSubmitInfo(ctx context.Context, arg GetSubmitInfoParams) (GetSubmitInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getSubmitInfo, arg.StudentID, arg.Semester, arg.Name)
	var i GetSubmitInfoRow
	err := row.Scan(&i.StudentID, &i.HomeworkID)
	return i, err
}

const submitGrade = `-- name: SubmitGrade :exec
INSERT INTO grade (student_id, homework_id, created_at, grade)
VALUES (?, ?, datetime('now'), ?)
`

type SubmitGradeParams struct {
	StudentID  int64   `json:"student_id"`
	HomeworkID int64   `json:"homework_id"`
	Grade      float64 `json:"grade"`
}

func (q *Queries) SubmitGrade(ctx context.Context, arg SubmitGradeParams) error {
	_, err := q.db.ExecContext(ctx, submitGrade, arg.StudentID, arg.HomeworkID, arg.Grade)
	return err
}
