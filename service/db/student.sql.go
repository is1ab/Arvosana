// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: student.sql

package db

import (
	"context"

	"github.com/is1ab/Arvosana/types"
)

const addStudent = `-- name: AddStudent :exec
INSERT INTO student (student_id, semester)
VALUES (?, ?)
`

type AddStudentParams struct {
	StudentID string         `json:"student_id"`
	Semester  types.Semester `json:"semester"`
}

func (q *Queries) AddStudent(ctx context.Context, arg AddStudentParams) error {
	_, err := q.db.ExecContext(ctx, addStudent, arg.StudentID, arg.Semester)
	return err
}

const deleteStudent = `-- name: DeleteStudent :exec
PRAGMA foreign_keys = ON;
DELETE FROM student
WHERE student_id = ? AND semester = ?
`

type DeleteStudentParams struct {
	StudentID string         `json:"student_id"`
	Semester  types.Semester `json:"semester"`
}

func (q *Queries) DeleteStudent(ctx context.Context, arg DeleteStudentParams) error {
	_, err := q.db.ExecContext(ctx, deleteStudent, arg.StudentID, arg.Semester)
	return err
}

const getAllStudents = `-- name: GetAllStudents :many
SELECT student_id, semester FROM student
`

type GetAllStudentsRow struct {
	StudentID string         `json:"student_id"`
	Semester  types.Semester `json:"semester"`
}

func (q *Queries) GetAllStudents(ctx context.Context) ([]GetAllStudentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllStudentsRow{}
	for rows.Next() {
		var i GetAllStudentsRow
		if err := rows.Scan(&i.StudentID, &i.Semester); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentInfo = `-- name: GetStudentInfo :many
SELECT
    homework.name,
    grade.submitted_at,
    grade.grade
FROM homework
CROSS JOIN student
LEFT JOIN grade ON
    homework.id = grade.homework_id AND
    student.id = grade.student_id
WHERE
    student.student_id = ? AND
    student.semester = ?
GROUP BY homework.id
ORDER BY homework.begin_at DESC
`

type GetStudentInfoParams struct {
	StudentID string         `json:"student_id"`
	Semester  types.Semester `json:"semester"`
}

type GetStudentInfoRow struct {
	Name        string             `json:"name"`
	SubmittedAt types.NullDatetime `json:"submitted_at"`
	Grade       types.NullFloat64  `json:"grade"`
}

func (q *Queries) GetStudentInfo(ctx context.Context, arg GetStudentInfoParams) ([]GetStudentInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentInfo, arg.StudentID, arg.Semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetStudentInfoRow{}
	for rows.Next() {
		var i GetStudentInfoRow
		if err := rows.Scan(&i.Name, &i.SubmittedAt, &i.Grade); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentsBySemester = `-- name: GetStudentsBySemester :many
SELECT student_id FROM student
WHERE semester = ?
`

func (q *Queries) GetStudentsBySemester(ctx context.Context, semester types.Semester) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getStudentsBySemester, semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var student_id string
		if err := rows.Scan(&student_id); err != nil {
			return nil, err
		}
		items = append(items, student_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStudent = `-- name: UpdateStudent :exec
UPDATE student
SET
    student_id = ?1,
    semester = ?2
WHERE
    student_id = ?3 AND semester = ?4
`

type UpdateStudentParams struct {
	NewStudentID string         `json:"new_student_id"`
	NewSemester  types.Semester `json:"new_semester"`
	OldStudendID string         `json:"old_studend_id"`
	OldSemester  types.Semester `json:"old_semester"`
}

func (q *Queries) UpdateStudent(ctx context.Context, arg UpdateStudentParams) error {
	_, err := q.db.ExecContext(ctx, updateStudent,
		arg.NewStudentID,
		arg.NewSemester,
		arg.OldStudendID,
		arg.OldSemester,
	)
	return err
}
