// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: homework.sql

package db

import (
	"context"

	"github.com/is1ab/Arvosana/types"
)

const addHomework = `-- name: AddHomework :exec
INSERT INTO homework (name, semester, begin_at, end_at)
VALUES (?, ?, ?, ?)
`

type AddHomeworkParams struct {
	Name     string         `json:"name"`
	Semester types.Semester `json:"semester"`
	BeginAt  types.Datetime `json:"begin_at"`
	EndAt    types.Datetime `json:"end_at"`
}

func (q *Queries) AddHomework(ctx context.Context, arg AddHomeworkParams) error {
	_, err := q.db.ExecContext(ctx, addHomework,
		arg.Name,
		arg.Semester,
		arg.BeginAt,
		arg.EndAt,
	)
	return err
}

const getAllHomeworks = `-- name: GetAllHomeworks :many
SELECT name, semester, begin_at, end_at FROM homework
ORDER BY begin_at DESC
`

type GetAllHomeworksRow struct {
	Name     string         `json:"name"`
	Semester types.Semester `json:"semester"`
	BeginAt  types.Datetime `json:"begin_at"`
	EndAt    types.Datetime `json:"end_at"`
}

func (q *Queries) GetAllHomeworks(ctx context.Context) ([]GetAllHomeworksRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllHomeworks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllHomeworksRow{}
	for rows.Next() {
		var i GetAllHomeworksRow
		if err := rows.Scan(
			&i.Name,
			&i.Semester,
			&i.BeginAt,
			&i.EndAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHomeworkInfo = `-- name: GetHomeworkInfo :one
SELECT semester, name, begin_at, end_at FROM homework
WHERE
    semester = ? AND
    name = ?
`

type GetHomeworkInfoParams struct {
	Semester types.Semester `json:"semester"`
	Name     string         `json:"name"`
}

type GetHomeworkInfoRow struct {
	Semester types.Semester `json:"semester"`
	Name     string         `json:"name"`
	BeginAt  types.Datetime `json:"begin_at"`
	EndAt    types.Datetime `json:"end_at"`
}

func (q *Queries) GetHomeworkInfo(ctx context.Context, arg GetHomeworkInfoParams) (GetHomeworkInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getHomeworkInfo, arg.Semester, arg.Name)
	var i GetHomeworkInfoRow
	err := row.Scan(
		&i.Semester,
		&i.Name,
		&i.BeginAt,
		&i.EndAt,
	)
	return i, err
}

const getHomeworksFromSemester = `-- name: GetHomeworksFromSemester :many
SELECT name, begin_at, end_at FROM homework
WHERE semester = ?
ORDER BY begin_at DESC
`

type GetHomeworksFromSemesterRow struct {
	Name    string         `json:"name"`
	BeginAt types.Datetime `json:"begin_at"`
	EndAt   types.Datetime `json:"end_at"`
}

func (q *Queries) GetHomeworksFromSemester(ctx context.Context, semester types.Semester) ([]GetHomeworksFromSemesterRow, error) {
	rows, err := q.db.QueryContext(ctx, getHomeworksFromSemester, semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetHomeworksFromSemesterRow{}
	for rows.Next() {
		var i GetHomeworksFromSemesterRow
		if err := rows.Scan(&i.Name, &i.BeginAt, &i.EndAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHomework = `-- name: UpdateHomework :exec
UPDATE homework
SET
    name        = COALESCE(?1, name),
    semester    = COALESCE(?2, semester),
    begin_at    = COALESCE(?3, begin_at),
    end_at      = COALESCE(?4, end_at)
WHERE
    semester = ?5 AND
    name = ?6
`

type UpdateHomeworkParams struct {
	NewName     types.NullString   `json:"new_name"`
	NewSemester types.NullSemester `json:"new_semester"`
	NewBeginAt  types.NullDatetime `json:"new_begin_at"`
	NewEndAt    types.NullDatetime `json:"new_end_at"`
	OldSemester types.Semester     `json:"old_semester"`
	OldName     string             `json:"old_name"`
}

func (q *Queries) UpdateHomework(ctx context.Context, arg UpdateHomeworkParams) error {
	_, err := q.db.ExecContext(ctx, updateHomework,
		arg.NewName,
		arg.NewSemester,
		arg.NewBeginAt,
		arg.NewEndAt,
		arg.OldSemester,
		arg.OldName,
	)
	return err
}
